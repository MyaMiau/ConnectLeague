datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model evaluations {
  id           Int       @id @default(autoincrement())
  evaluator_id Int
  evaluated_id Int
  rating       Int
  comment      String?
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  evaluated    users     @relation("evaluations_evaluated_id", fields: [evaluated_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  evaluator    users     @relation("evaluations_evaluator_id", fields: [evaluator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model applications {
  id         Int       @id @default(autoincrement())
  user_id    Int
  vacancy_id Int
  status     String?   @default("pending") @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  user       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  vacancy    vacancies @relation(fields: [vacancy_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id             Int           @id @default(autoincrement())
  name           String        @db.VarChar(100)
  email          String        @unique @db.VarChar(100)
  emailVerified  DateTime?
  image          String?
  password       String
  // TIPO DE USUÁRIO: obrigatório, ex: 'organization', 'player', 'coach', 'manager', 'analyst', 'psychologist'
  type           String        @db.VarChar(50) 
  // ROLE: para jogadores (opcional), ex: 'atacante', 'suporte', etc.
  role           String?       @db.VarChar(50)
  birthDate      DateTime
  created_at     DateTime?     @default(now()) @db.Timestamp(6)
  bio            String?       
  elo            String?  
  status         String?  
  // CAMPOS OPCIONAIS PARA ORGANIZAÇÃO
  orgName        String?       @db.VarChar(100)
  cnpj           String?       @db.VarChar(30)
  orgDesc        String?
  // RELACIONAMENTOS
  accounts       accounts[]
  sessions       sessions[]
  evaluations_received evaluations[] @relation("evaluations_evaluated_id")
  evaluations_given    evaluations[] @relation("evaluations_evaluator_id")
  applications   applications[]
  vacancies      vacancies[]
  posts      Post[]      @relation("UserPosts")
  comments   Comment[]   @relation("UserComments")
}

model vacancies {
  id             Int           @id @default(autoincrement())
  title          String        @db.VarChar(100)
  description    String
  organization_id Int
  created_at     DateTime?     @default(now()) @db.Timestamp(6)
  applications   applications[]
  organization   users         @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model accounts {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model sessions {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime
  user         users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model verification_tokens {
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  authorId  Int
  author    users     @relation("UserPosts", fields: [authorId], references: [id])
  comments  Comment[]
  image     String? 
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  authorId  Int
  postId    Int
  author    users    @relation("UserComments", fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}